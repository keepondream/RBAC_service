// Code generated by sqlc. DO NOT EDIT.
// source: rbac.sql

package rbacStore

import (
	"context"
	"database/sql"
)

const getInfoByIDTenant = `-- name: GetInfoByIDTenant :one
SELECT id, p_type, v0, v1, v2, v3, v4, v5
FROM rbac_casbin_rules
WHERE id = $1
  AND v1 = $2
`

type GetInfoByIDTenantParams struct {
	ID string         `json:"id"`
	V1 sql.NullString `json:"v1"`
}

func (q *Queries) GetInfoByIDTenant(ctx context.Context, arg GetInfoByIDTenantParams) (RbacCasbinRule, error) {
	row := q.queryRow(ctx, q.getInfoByIDTenantStmt, getInfoByIDTenant, arg.ID, arg.V1)
	var i RbacCasbinRule
	err := row.Scan(
		&i.ID,
		&i.PType,
		&i.V0,
		&i.V1,
		&i.V2,
		&i.V3,
		&i.V4,
		&i.V5,
	)
	return i, err
}

const listBySignTenant = `-- name: ListBySignTenant :many
SELECT id, p_type, v0, v1, v2, v3, v4, v5
FROM rbac_casbin_rules
WHERE v0 = $1
  AND v1 = $2
LIMIT $3 OFFSET $4
`

type ListBySignTenantParams struct {
	V0     sql.NullString `json:"v0"`
	V1     sql.NullString `json:"v1"`
	Limit  int32          `json:"limit"`
	Offset int32          `json:"offset"`
}

func (q *Queries) ListBySignTenant(ctx context.Context, arg ListBySignTenantParams) ([]RbacCasbinRule, error) {
	rows, err := q.query(ctx, q.listBySignTenantStmt, listBySignTenant,
		arg.V0,
		arg.V1,
		arg.Limit,
		arg.Offset,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []RbacCasbinRule{}
	for rows.Next() {
		var i RbacCasbinRule
		if err := rows.Scan(
			&i.ID,
			&i.PType,
			&i.V0,
			&i.V1,
			&i.V2,
			&i.V3,
			&i.V4,
			&i.V5,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const totalBySignTenant = `-- name: TotalBySignTenant :one
SELECT count(*)
FROM rbac_casbin_rules
WHERE v0 = $1
  AND v1 = $2
`

type TotalBySignTenantParams struct {
	V0 sql.NullString `json:"v0"`
	V1 sql.NullString `json:"v1"`
}

func (q *Queries) TotalBySignTenant(ctx context.Context, arg TotalBySignTenantParams) (int64, error) {
	row := q.queryRow(ctx, q.totalBySignTenantStmt, totalBySignTenant, arg.V0, arg.V1)
	var count int64
	err := row.Scan(&count)
	return count, err
}
