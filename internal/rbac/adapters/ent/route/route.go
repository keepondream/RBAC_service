// Code generated by entc, DO NOT EDIT.

package route

import (
	"fmt"
	"time"
)

const (
	// Label holds the string label denoting the route type in the database.
	Label = "route"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldTenant holds the string denoting the tenant field in the database.
	FieldTenant = "tenant"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldURI holds the string denoting the uri field in the database.
	FieldURI = "uri"
	// FieldMethod holds the string denoting the method field in the database.
	FieldMethod = "method"
	// FieldData holds the string denoting the data field in the database.
	FieldData = "data"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// EdgePermissions holds the string denoting the permissions edge name in mutations.
	EdgePermissions = "permissions"
	// Table holds the table name of the route in the database.
	Table = "routes"
	// PermissionsTable is the table the holds the permissions relation/edge. The primary key declared below.
	PermissionsTable = "permission_routes"
	// PermissionsInverseTable is the table name for the Permission entity.
	// It exists in this package in order to avoid circular dependency with the "permission" package.
	PermissionsInverseTable = "permissions"
)

// Columns holds all SQL columns for route fields.
var Columns = []string{
	FieldID,
	FieldTenant,
	FieldName,
	FieldURI,
	FieldMethod,
	FieldData,
	FieldCreatedAt,
	FieldUpdatedAt,
}

var (
	// PermissionsPrimaryKey and PermissionsColumn2 are the table columns denoting the
	// primary key for the permissions relation (M2M).
	PermissionsPrimaryKey = []string{"permission_id", "route_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// TenantValidator is a validator for the "tenant" field. It is called by the builders before save.
	TenantValidator func(string) error
	// NameValidator is a validator for the "name" field. It is called by the builders before save.
	NameValidator func(string) error
	// URIValidator is a validator for the "uri" field. It is called by the builders before save.
	URIValidator func(string) error
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
)

// Method defines the type for the "method" enum field.
type Method string

// Method values.
const (
	MethodGET     Method = "GET"
	MethodHEAD    Method = "HEAD"
	MethodPOST    Method = "POST"
	MethodPUT     Method = "PUT"
	MethodPATCH   Method = "PATCH"
	MethodDELETE  Method = "DELETE"
	MethodCONNECT Method = "CONNECT"
	MethodOPTIONS Method = "OPTIONS"
	MethodTRACE   Method = "TRACE"
)

func (m Method) String() string {
	return string(m)
}

// MethodValidator is a validator for the "method" field enum values. It is called by the builders before save.
func MethodValidator(m Method) error {
	switch m {
	case MethodGET, MethodHEAD, MethodPOST, MethodPUT, MethodPATCH, MethodDELETE, MethodCONNECT, MethodOPTIONS, MethodTRACE:
		return nil
	default:
		return fmt.Errorf("route: invalid enum value for method field: %q", m)
	}
}
