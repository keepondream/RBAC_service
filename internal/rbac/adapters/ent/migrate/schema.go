// Code generated by entc, DO NOT EDIT.

package migrate

import (
	"entgo.io/ent/dialect/sql/schema"
	"entgo.io/ent/schema/field"
)

var (
	// GroupsColumns holds the columns for the "groups" table.
	GroupsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "tenant", Type: field.TypeString},
		{Name: "name", Type: field.TypeString},
		{Name: "type", Type: field.TypeString},
		{Name: "data", Type: field.TypeJSON},
		{Name: "created_at", Type: field.TypeTime, Default: "(now() at time zone 'utc')", SchemaType: map[string]string{"postgres": "timestamptz(0)"}},
		{Name: "updated_at", Type: field.TypeTime, Default: "(now() at time zone 'utc')", SchemaType: map[string]string{"postgres": "timestamptz(0)"}},
		{Name: "parent_id", Type: field.TypeInt, Nullable: true},
	}
	// GroupsTable holds the schema information for the "groups" table.
	GroupsTable = &schema.Table{
		Name:       "groups",
		Columns:    GroupsColumns,
		PrimaryKey: []*schema.Column{GroupsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "groups_groups_children",
				Columns:    []*schema.Column{GroupsColumns[7]},
				RefColumns: []*schema.Column{GroupsColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "group_tenant_name_type",
				Unique:  true,
				Columns: []*schema.Column{GroupsColumns[1], GroupsColumns[2], GroupsColumns[3]},
			},
		},
	}
	// NodesColumns holds the columns for the "nodes" table.
	NodesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "tenant", Type: field.TypeString},
		{Name: "name", Type: field.TypeString},
		{Name: "type", Type: field.TypeString},
		{Name: "data", Type: field.TypeJSON},
		{Name: "created_at", Type: field.TypeTime, Default: "(now() at time zone 'utc')", SchemaType: map[string]string{"postgres": "timestamptz(0)"}},
		{Name: "updated_at", Type: field.TypeTime, Default: "(now() at time zone 'utc')", SchemaType: map[string]string{"postgres": "timestamptz(0)"}},
		{Name: "parent_id", Type: field.TypeInt, Nullable: true},
	}
	// NodesTable holds the schema information for the "nodes" table.
	NodesTable = &schema.Table{
		Name:       "nodes",
		Columns:    NodesColumns,
		PrimaryKey: []*schema.Column{NodesColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "nodes_nodes_children",
				Columns:    []*schema.Column{NodesColumns[7]},
				RefColumns: []*schema.Column{NodesColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "node_tenant_name_type",
				Unique:  true,
				Columns: []*schema.Column{NodesColumns[1], NodesColumns[2], NodesColumns[3]},
			},
		},
	}
	// PermissionsColumns holds the columns for the "permissions" table.
	PermissionsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "tenant", Type: field.TypeString},
		{Name: "name", Type: field.TypeString},
		{Name: "data", Type: field.TypeJSON},
		{Name: "created_at", Type: field.TypeTime, Default: "(now() at time zone 'utc')", SchemaType: map[string]string{"postgres": "timestamptz(0)"}},
		{Name: "updated_at", Type: field.TypeTime, Default: "(now() at time zone 'utc')", SchemaType: map[string]string{"postgres": "timestamptz(0)"}},
	}
	// PermissionsTable holds the schema information for the "permissions" table.
	PermissionsTable = &schema.Table{
		Name:        "permissions",
		Columns:     PermissionsColumns,
		PrimaryKey:  []*schema.Column{PermissionsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{},
		Indexes: []*schema.Index{
			{
				Name:    "permission_tenant_name",
				Unique:  true,
				Columns: []*schema.Column{PermissionsColumns[1], PermissionsColumns[2]},
			},
		},
	}
	// RoutesColumns holds the columns for the "routes" table.
	RoutesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "tenant", Type: field.TypeString},
		{Name: "name", Type: field.TypeString},
		{Name: "uri", Type: field.TypeString},
		{Name: "method", Type: field.TypeEnum, Enums: []string{"GET", "HEAD", "POST", "PUT", "PATCH", "DELETE", "CONNECT", "OPTIONS", "TRACE"}},
		{Name: "data", Type: field.TypeJSON},
		{Name: "created_at", Type: field.TypeTime, Default: "(now() at time zone 'utc')", SchemaType: map[string]string{"postgres": "timestamptz(0)"}},
		{Name: "updated_at", Type: field.TypeTime, Default: "(now() at time zone 'utc')", SchemaType: map[string]string{"postgres": "timestamptz(0)"}},
	}
	// RoutesTable holds the schema information for the "routes" table.
	RoutesTable = &schema.Table{
		Name:        "routes",
		Columns:     RoutesColumns,
		PrimaryKey:  []*schema.Column{RoutesColumns[0]},
		ForeignKeys: []*schema.ForeignKey{},
		Indexes: []*schema.Index{
			{
				Name:    "route_tenant_uri_method",
				Unique:  true,
				Columns: []*schema.Column{RoutesColumns[1], RoutesColumns[3], RoutesColumns[4]},
			},
		},
	}
	// UsersColumns holds the columns for the "users" table.
	UsersColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "tenant", Type: field.TypeString},
		{Name: "uuid", Type: field.TypeString},
		{Name: "is_super", Type: field.TypeBool, Default: false},
		{Name: "data", Type: field.TypeJSON},
		{Name: "created_at", Type: field.TypeTime, Default: "(now() at time zone 'utc')", SchemaType: map[string]string{"postgres": "timestamptz(0)"}},
		{Name: "updated_at", Type: field.TypeTime, Default: "(now() at time zone 'utc')", SchemaType: map[string]string{"postgres": "timestamptz(0)"}},
		{Name: "parent_id", Type: field.TypeInt, Nullable: true},
	}
	// UsersTable holds the schema information for the "users" table.
	UsersTable = &schema.Table{
		Name:       "users",
		Columns:    UsersColumns,
		PrimaryKey: []*schema.Column{UsersColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "users_users_children",
				Columns:    []*schema.Column{UsersColumns[7]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "user_tenant_uuid",
				Unique:  true,
				Columns: []*schema.Column{UsersColumns[1], UsersColumns[2]},
			},
		},
	}
	// GroupNodesColumns holds the columns for the "group_nodes" table.
	GroupNodesColumns = []*schema.Column{
		{Name: "group_id", Type: field.TypeInt},
		{Name: "node_id", Type: field.TypeInt},
	}
	// GroupNodesTable holds the schema information for the "group_nodes" table.
	GroupNodesTable = &schema.Table{
		Name:       "group_nodes",
		Columns:    GroupNodesColumns,
		PrimaryKey: []*schema.Column{GroupNodesColumns[0], GroupNodesColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "group_nodes_group_id",
				Columns:    []*schema.Column{GroupNodesColumns[0]},
				RefColumns: []*schema.Column{GroupsColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "group_nodes_node_id",
				Columns:    []*schema.Column{GroupNodesColumns[1]},
				RefColumns: []*schema.Column{NodesColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// GroupUsersColumns holds the columns for the "group_users" table.
	GroupUsersColumns = []*schema.Column{
		{Name: "group_id", Type: field.TypeInt},
		{Name: "user_id", Type: field.TypeInt},
	}
	// GroupUsersTable holds the schema information for the "group_users" table.
	GroupUsersTable = &schema.Table{
		Name:       "group_users",
		Columns:    GroupUsersColumns,
		PrimaryKey: []*schema.Column{GroupUsersColumns[0], GroupUsersColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "group_users_group_id",
				Columns:    []*schema.Column{GroupUsersColumns[0]},
				RefColumns: []*schema.Column{GroupsColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "group_users_user_id",
				Columns:    []*schema.Column{GroupUsersColumns[1]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// NodePermissionsColumns holds the columns for the "node_permissions" table.
	NodePermissionsColumns = []*schema.Column{
		{Name: "node_id", Type: field.TypeInt},
		{Name: "permission_id", Type: field.TypeInt},
	}
	// NodePermissionsTable holds the schema information for the "node_permissions" table.
	NodePermissionsTable = &schema.Table{
		Name:       "node_permissions",
		Columns:    NodePermissionsColumns,
		PrimaryKey: []*schema.Column{NodePermissionsColumns[0], NodePermissionsColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "node_permissions_node_id",
				Columns:    []*schema.Column{NodePermissionsColumns[0]},
				RefColumns: []*schema.Column{NodesColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "node_permissions_permission_id",
				Columns:    []*schema.Column{NodePermissionsColumns[1]},
				RefColumns: []*schema.Column{PermissionsColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// NodeUsersColumns holds the columns for the "node_users" table.
	NodeUsersColumns = []*schema.Column{
		{Name: "node_id", Type: field.TypeInt},
		{Name: "user_id", Type: field.TypeInt},
	}
	// NodeUsersTable holds the schema information for the "node_users" table.
	NodeUsersTable = &schema.Table{
		Name:       "node_users",
		Columns:    NodeUsersColumns,
		PrimaryKey: []*schema.Column{NodeUsersColumns[0], NodeUsersColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "node_users_node_id",
				Columns:    []*schema.Column{NodeUsersColumns[0]},
				RefColumns: []*schema.Column{NodesColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "node_users_user_id",
				Columns:    []*schema.Column{NodeUsersColumns[1]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// PermissionRoutesColumns holds the columns for the "permission_routes" table.
	PermissionRoutesColumns = []*schema.Column{
		{Name: "permission_id", Type: field.TypeInt},
		{Name: "route_id", Type: field.TypeInt},
	}
	// PermissionRoutesTable holds the schema information for the "permission_routes" table.
	PermissionRoutesTable = &schema.Table{
		Name:       "permission_routes",
		Columns:    PermissionRoutesColumns,
		PrimaryKey: []*schema.Column{PermissionRoutesColumns[0], PermissionRoutesColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "permission_routes_permission_id",
				Columns:    []*schema.Column{PermissionRoutesColumns[0]},
				RefColumns: []*schema.Column{PermissionsColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "permission_routes_route_id",
				Columns:    []*schema.Column{PermissionRoutesColumns[1]},
				RefColumns: []*schema.Column{RoutesColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// PermissionUsersColumns holds the columns for the "permission_users" table.
	PermissionUsersColumns = []*schema.Column{
		{Name: "permission_id", Type: field.TypeInt},
		{Name: "user_id", Type: field.TypeInt},
	}
	// PermissionUsersTable holds the schema information for the "permission_users" table.
	PermissionUsersTable = &schema.Table{
		Name:       "permission_users",
		Columns:    PermissionUsersColumns,
		PrimaryKey: []*schema.Column{PermissionUsersColumns[0], PermissionUsersColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "permission_users_permission_id",
				Columns:    []*schema.Column{PermissionUsersColumns[0]},
				RefColumns: []*schema.Column{PermissionsColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "permission_users_user_id",
				Columns:    []*schema.Column{PermissionUsersColumns[1]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// Tables holds all the tables in the schema.
	Tables = []*schema.Table{
		GroupsTable,
		NodesTable,
		PermissionsTable,
		RoutesTable,
		UsersTable,
		GroupNodesTable,
		GroupUsersTable,
		NodePermissionsTable,
		NodeUsersTable,
		PermissionRoutesTable,
		PermissionUsersTable,
	}
)

func init() {
	GroupsTable.ForeignKeys[0].RefTable = GroupsTable
	NodesTable.ForeignKeys[0].RefTable = NodesTable
	UsersTable.ForeignKeys[0].RefTable = UsersTable
	GroupNodesTable.ForeignKeys[0].RefTable = GroupsTable
	GroupNodesTable.ForeignKeys[1].RefTable = NodesTable
	GroupUsersTable.ForeignKeys[0].RefTable = GroupsTable
	GroupUsersTable.ForeignKeys[1].RefTable = UsersTable
	NodePermissionsTable.ForeignKeys[0].RefTable = NodesTable
	NodePermissionsTable.ForeignKeys[1].RefTable = PermissionsTable
	NodeUsersTable.ForeignKeys[0].RefTable = NodesTable
	NodeUsersTable.ForeignKeys[1].RefTable = UsersTable
	PermissionRoutesTable.ForeignKeys[0].RefTable = PermissionsTable
	PermissionRoutesTable.ForeignKeys[1].RefTable = RoutesTable
	PermissionUsersTable.ForeignKeys[0].RefTable = PermissionsTable
	PermissionUsersTable.ForeignKeys[1].RefTable = UsersTable
}
