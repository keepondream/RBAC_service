// Package ports provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.8.1 DO NOT EDIT.
package ports

import (
	"time"
)

// Defines values for ItemMethodMethod.
const (
	ItemMethodMethodCONNECT ItemMethodMethod = "CONNECT"

	ItemMethodMethodDELETE ItemMethodMethod = "DELETE"

	ItemMethodMethodGET ItemMethodMethod = "GET"

	ItemMethodMethodHEAD ItemMethodMethod = "HEAD"

	ItemMethodMethodOPTIONS ItemMethodMethod = "OPTIONS"

	ItemMethodMethodPATCH ItemMethodMethod = "PATCH"

	ItemMethodMethodPOST ItemMethodMethod = "POST"

	ItemMethodMethodPUT ItemMethodMethod = "PUT"

	ItemMethodMethodTRACE ItemMethodMethod = "TRACE"
)

// Defines values for Order.
const (
	Asc Order = "asc"

	Desc Order = "desc"
)

// ItemCreatedat defines model for ItemCreatedat.
type ItemCreatedat struct {

	// 创建时间 零时区时间格式: YYYY-MM-DDTHH:MM:SSZ
	CreatedAt time.Time `json:"created_at"`
}

// ItemData defines model for ItemData.
type ItemData struct {

	// 自定义json数据
	Data interface{} `json:"data"`
}

// ItemMethod defines model for ItemMethod.
type ItemMethod struct {

	// URL请求方式 GET,HEAD,POST,PUT,PATCH,DELETE,CONNECT,OPTIONS,TRACE
	Method ItemMethodMethod `json:"method"`
}

// URL请求方式 GET,HEAD,POST,PUT,PATCH,DELETE,CONNECT,OPTIONS,TRACE
type ItemMethodMethod string

// ItemTenant defines model for ItemTenant.
type ItemTenant struct {

	// 域标识,可自定义用于区分哪个平台使用
	Tenant string `json:"tenant"`
}

// ItemUpdatedat defines model for ItemUpdatedat.
type ItemUpdatedat struct {

	// 更新时间 零时区时间格式: YYYY-MM-DDTHH:MM:SSZ
	UpdatedAt time.Time `json:"updated_at"`
}

// Route defines model for Route.
type Route struct {
	// Embedded fields due to inline allOf schema

	// 路由ID
	Id string `json:"id"`

	// 路由名称
	Name string `json:"name"`

	// 拦截URL
	Uri string `json:"uri"`
	// Embedded struct due to allOf(#/components/schemas/ItemMethod)
	ItemMethod `yaml:",inline"`
	// Embedded struct due to allOf(#/components/schemas/ItemTenant)
	ItemTenant `yaml:",inline"`
	// Embedded struct due to allOf(#/components/schemas/ItemData)
	ItemData `yaml:",inline"`
	// Embedded struct due to allOf(#/components/schemas/ItemCreatedat)
	ItemCreatedat `yaml:",inline"`
	// Embedded struct due to allOf(#/components/schemas/ItemUpdatedat)
	ItemUpdatedat `yaml:",inline"`
}

// EndTime defines model for end_time.
type EndTime time.Time

// Order defines model for order.
type Order string

// Page defines model for page.
type Page string

// PerPage defines model for per_page.
type PerPage string

// Query defines model for query.
type Query string

// Sort defines model for sort.
type Sort string

// StartTime defines model for start_time.
type StartTime time.Time

// RouteDetail defines model for RouteDetail.
type RouteDetail Route

// RouteList defines model for RouteList.
type RouteList struct {
	Items []Route `json:"items"`
	Total string  `json:"total"`
}

// GetRoutesParams defines parameters for GetRoutes.
type GetRoutesParams struct {

	// 页码
	Page Page `json:"page"`

	// 分页数量 默认20, 最大100
	PerPage *PerPage `json:"per_page,omitempty"`

	// 排序方式 只支持 asc 或者 desc
	Order GetRoutesParamsOrder `json:"order"`

	// 排序字段 多个组合用逗号分隔 示例: id,name
	Sort *Sort `json:"sort,omitempty"`

	// - 查询关键字以空格分割,多个维度用冒号连接关键字,每个关键字需要用encode `示例: 查询默认关键字为name "route1 route2"两个名称的路由, 域标识为 domain1 或者 domain2 的数据`  ``` http://host.com?query=${encodeURIComponent('route1')} ${encodeURIComponent('route2')} tenant:${encodeURIComponent('domain1')} tenant:${encodeURIComponent('domain2')} ```
	Query *Query `json:"query,omitempty"`

	// 起始时间 零时区时间格式: YYYY-MM-DDTHH:MM:SSZ
	StartTime *StartTime `json:"start_time,omitempty"`

	// 结束时间 零时区时间格式: YYYY-MM-DDTHH:MM:SSZ
	EndTime *EndTime `json:"end_time,omitempty"`
}

// GetRoutesParamsOrder defines parameters for GetRoutes.
type GetRoutesParamsOrder string

// PostRoutesJSONBody defines parameters for PostRoutes.
type PostRoutesJSONBody struct {
	// Embedded struct due to allOf(#/components/schemas/ItemTenant)
	ItemTenant `yaml:",inline"`
	// Embedded fields due to inline allOf schema

	// 路由名称
	Name string `json:"name"`

	// 路由路径,拦截URL,path 例如: /users/:id
	Uri string `json:"uri"`
	// Embedded struct due to allOf(#/components/schemas/ItemMethod)
	ItemMethod `yaml:",inline"`
	// Embedded struct due to allOf(#/components/schemas/ItemData)
	ItemData `yaml:",inline"`
}

// PatchRoutesIdJSONBody defines parameters for PatchRoutesId.
type PatchRoutesIdJSONBody struct {
	Data   *ItemData   `json:"data,omitempty"`
	Method *ItemMethod `json:"method,omitempty"`

	// 路由名称
	Name   *string     `json:"name,omitempty"`
	Tenant *ItemTenant `json:"tenant,omitempty"`

	// 路由路径,path,拦截URL
	Uri *string `json:"uri,omitempty"`
}

// PostRoutesJSONRequestBody defines body for PostRoutes for application/json ContentType.
type PostRoutesJSONRequestBody PostRoutesJSONBody

// PatchRoutesIdJSONRequestBody defines body for PatchRoutesId for application/json ContentType.
type PatchRoutesIdJSONRequestBody PatchRoutesIdJSONBody
